import openai
from keys import OPENAI_API_KEY

openai.api_key = OPENAI_API_KEY

class GenerativeBaseModel:
    # boilerplate GPT conditions
    def __init__(self, PROMPT: str, MODEL_ENGINE: str = "text-davinci-003", current_state: int = 1):
        self.N = 1
        self.STOP = None
        self.PROMPT = PROMPT
        self.MAX_TOKENS = 4000
        self.TEMPERATURE = 0.5
        self.MODEL_ENGINE = MODEL_ENGINE
        self.current_state = current_state
        self.next_level = self.PROMPT
    # returns the response of the given prompt from GPT
    def get_gpt_output(self):
        return openai.Completion.create(engine = self.MODEL_ENGINE, 
                                        prompt = self.next_level,
                                        max_tokens = self.MAX_TOKENS,
                                        n = self.N,
                                        stop = self.STOP,
                                        temperature = self.TEMPERATURE)

class GenerativeAdventureGame(GenerativeBaseModel):
    def __init__(self, PROMPT: str, MODEL_ENGINE: str = "text-davinci-003", current_state: int = 1):
        super().__init__(PROMPT, MODEL_ENGINE, current_state)
        super().get_gpt_output()
    def run_game_loop(self, added_prompt: str = None):
        """ 
        For each game loop, the current prompt is displayed, user input options are displayed, and 
        user input can be accepted via the command-line. If the user input matches a given option (within
        some degree of error), the user input will be passed back to GPT to generate a new prompt via
        recursion (a.k.a. this function is invoked again).
        """
        if added_prompt is None:
            # Get Initial Choices for "Level 0" (Game Init).
            level_options = self.get_gpt_output()
        else:
            # Create New Level by Connecting New Generated Response to User Input.
            self.next_level += f"\n{added_prompt}"
            level_options = self.get_gpt_output()
        # Display current prompt generated by GPT.
        self.next_level = level_options.choices[0].text
        print(f"|----- LEVEL {self.current_state} -----|\n\n{self.next_level}")
        
        # Accept User Input from Available Options.
        user_input = input("\n next choice >>  ")

        # Pipe User Input Back to GPT and Recursively Invoke Game Loop.
        # Additionally, if User Input Specifies a Quitting Keyword, Kill the Program.
        if "quit" in user_input.lower():
            return print("Thanks for playing!")
        else:
            self.current_state += 1
            self.run_game_loop(added_prompt = f"The user has chosen to do this: '{user_input}'.")
            
class GenerativeLanguageAssistant(GenerativeBaseModel):
    def __init__(self, PROMPT: str, MODEL_ENGINE: str = "text-davinci-003", current_state: int = 1):
        super().__init__(PROMPT, MODEL_ENGINE, current_state)
        super().get_gpt_output()
    def run_translation_loop(self):
        model_translation = self.get_gpt_output()
        print("\n\n------------------------------------------------------------------------------------------------\n")        
        print(model_translation.choices[0].text)
        print("\n------------------------------------------------------------------------------------------------\n\n")

class GenerativeChordProgression(GenerativeBaseModel):
    def __init__(self, PROMPT: str, MODEL_ENGINE: str = "text-davinci-003", current_state: int = 1):
        super().__init__(PROMPT, MODEL_ENGINE, current_state)
        super().get_gpt_output()
    def run_chord_progression_loop(self):
        chord_progression = self.get_gpt_output()
        print("\n\n------------------------------------------------------------------------------------------------\n")
        print(chord_progression.choices[0].text)
        print("\n------------------------------------------------------------------------------------------------\n\n")

class GenerativeCodingLesson(GenerativeBaseModel):
    def __init__(self, PROMPT: str, MODEL_ENGINE: str = "text-davinci-003", current_state: int = 1):
        super().__init__(PROMPT, MODEL_ENGINE, current_state)
        super().get_gpt_output()
    def run_coding_lesson_loop(self):
        coding_lesson = self.get_gpt_output()
        print("\n\n------------------------------------------------------------------------------------------------\n")
        print(coding_lesson.choices[0].text)
        print("\n------------------------------------------------------------------------------------------------\n\n")

class GenerativeGeneralPrompt(GenerativeBaseModel):
    def __init__(self, PROMPT: str, MODEL_ENGINE: str = "text-davinci-003", current_state: int = 1):
        super().__init__(PROMPT, MODEL_ENGINE, current_state)
        super().get_gpt_output()
    def run_general_prompt_loop(self):
        general_prompt = self.get_gpt_output()
        print("\n\n------------------------------------------------------------------------------------------------\n")
        print(general_prompt.choices[0].text)
        print("\n------------------------------------------------------------------------------------------------\n\n")

def main():
    print("\n==========================================================================================================")
    print("---------        Welcome to TerminalGPT, the bot powered by GPT running in your Terminal!        ---------")
    print("==========================================================================================================\n")
    print("\n • 1) Play a Choose-Your-Own-Adventure Game!")
    print("\n • 2) Translate a sentence into another language for me, and give me a lesson on it.")
    print("\n • 3) Generate a chord progression with a certain emotional quality.")
    print("\n • 4) Give me a lesson in a coding language.")
    print("\n • 5) Enter a general prompt.")

    user_choice = input("\nWhat would you like to do today? (Press `0` to return to the home screen.)\n\t >>  ")
    while "0" not in user_choice:

        if "1" in user_choice:
            print("\n\n------------------------------------------------------------------------------------------------\n")
            user_adventure_setting = input("Choose a setting for our adventure!\n\t >> ")
            PROMPT = f"Rule of Choose Your Own Adventure : •	First, ChatGPT must produce a prompt, and several options. •	Next, Human will select an option. •	Then, ChatGPT will describe the actions effect, and produce a next prompt. Confirm understanding by producing an initial prompt and options. Adventure Game Setting: {user_adventure_setting}"
            # Start Game Loop with Initial Prompt.
            adventure = GenerativeAdventureGame(PROMPT=PROMPT)
            adventure.run_game_loop()

        elif "2" in user_choice:
            print("\n\n------------------------------------------------------------------------------------------------\n")
            target_sentence = input("Enter the sentence you would like to translate:  ")
            target_language = input("\nEnter the language you would like to translate to: ")
            PROMPT = f"Imagine you are an expert in spoken English and {target_language}. I am a student learning how to speak {target_language} and want you to teach me how to say the phrase `{target_sentence}` in {target_language} colloquially i.e. as native speakers would say it. Give me a short lesson on how to do this."
            translation = GenerativeLanguageAssistant(PROMPT=PROMPT)
            translation.run_translation_loop()
        
        elif "3" in user_choice:
            print("\n\n------------------------------------------------------------------------------------------------\n")
            target_emotion = input("What emotion you would like to elicit in your music: ")
            target_musical_key = input("\nWhat key would you like the song to be in? ")
            PROMPT = f"What chord progression should i use to elicit a {target_emotion} in my music. It should be in the key of {target_musical_key}?"
            emotion = GenerativeChordProgression(PROMPT=PROMPT)
            emotion.run_chord_progression_loop()
        
        elif "4" in user_choice:
            print("\n\n------------------------------------------------------------------------------------------------\n")
            target_coding_language = input("What coding language would you like a lesson in?  ")
            target_coding_language_topic = input(f"\nWhat would you like to learn about {target_coding_language}? ")
            PROMPT = f"I would like you to give me a lesson in {target_coding_language}. Specifically, I would like a lesson in {target_coding_language_topic} in {target_coding_language}."
            coding_language_lesson = GenerativeCodingLesson(PROMPT=PROMPT)
            coding_language_lesson.run_coding_lesson_loop()
        
        elif "5" in user_choice:
            print("\n\n------------------------------------------------------------------------------------------------\n")
            target_prompt = input("What can I assist you with? ")
            PROMPT = f"{target_prompt}"
            general_prompt = GenerativeGeneralPrompt(PROMPT=PROMPT)
            general_prompt.run_general_prompt_loop()

    else:
        print("Bye! Thanks for using TerminalGPT!")
        return

if __name__ == "__main__":
    main()